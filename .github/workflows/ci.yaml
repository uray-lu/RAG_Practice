name: CI Pipeline

env:
  APP_NAME: 'qaai_system'
  APP_VERSION: '0.1.0'
  AUTHOR: 'Ray Lu'
  AUTHOR_EMAIL: 'raylu@gamania.com'
  requirements_file: 'requirements-prod.txt'
  container_registry_url: '167071742774.dkr.ecr.us-west-2.amazonaws.com'
  codecommit_repo: 'https://git-codecommit.us-west-2.amazonaws.com/v1/repos/qaai-api'

on:
  push:
    branches:
      - '**'


jobs:
  lint_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install Dependencies
        run: pip install -r ${{ env.requirements_file }}

      - name: Linting and Code Analysis
        run: |
          pip install pylint
          pylint .  
          
      - name: Run Tests
        run: |
          pip install pytest 
          if [ -n "$(find . -name 'test_*.py')" ]; then
            pytest
          else
            echo "No test files found, skipping pytest."
          fi

  build_and_push_image:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Check Container Registry URL
        run: |
          if [ -z "${{ vars.CONTAINER_REGISTRY_URL }}" ]; then
            echo "Container Registry URL is not set. Skipping subsequent steps..."
            echo "::set-output name=proceed::false"
          else
            echo "::set-output name=proceed::true"
          fi
  
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Build and Tag Docker Image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          docker build -t ${{env.APP_NAME}}:${{env.APP_VERSION}} .

          docker tag ${{env.APP_NAME}}:${{env.APP_VERSION}} ${{vars.CONTAINER_REGISTRY_URL}}/${{env.APP_NAME}}:${{env.APP_VERSION}}

      - name: Push Code to AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${{vars.CONTAINER_REGISTRY_URL}}

          docker push ${{vars.CONTAINER_REGISTRY_URL}}/${{env.APP_NAME}}:${{env.APP_VERSION}}
       
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Configure Git for AWS CodeCommit
        run: |
          git config --global credential.helper '!aws codecommit credential-helper $@'
          git config --global credential.UseHttpPath true
          git config --global user.email "${{ env.AUTHOR_EMAIL }}"
          git config --global user.name "${{ env.AUTHOR }}"

      - name: Add CodeCommit as a Remote Repository
        run: git remote add codecommit "${{ vars.CODECOMMIT_REPO }}"

      - name: Push to AWS CodeCommit
        run: git push --force codecommit main